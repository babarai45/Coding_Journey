# Well COME TO Code JOURNEY 

------------------
## Fundamental of Computer
### What is Computer ?
The Word Computer is inherited from compute(Calculations) Mathematics Calculations 
All computer technology is consists on  Mathematics 

### What is Computer Science ?
Computer Science is the study of computers and computational systems. It involves both the theoretical studies of algorithms and the practical aspects of implementing them through computer software and hardware.

### What is Programming ?
Programming is the process of creating a set of instructions that tell a computer how to perform a task. It involves writing code in various programming languages to implement algorithms and solve problems.


### What is Algorithm ?
An algorithm is a step-by-step procedure or formula for solving a problem. It is a sequence of instructions that can be followed to achieve a specific goal or perform a specific task. Algorithms are fundamental to computer science and programming, as they provide the logic and structure for writing code.

### What is Data Structure ?
A data structure is a way of organizing and storing data in a computer so that it can be accessed and modified efficiently. Data structures are essential for managing large amounts of data and for implementing algorithms effectively. Common data structures include arrays, linked lists, stacks, queues, trees, and graphs.


# How to Learn Programming language in deep ?
 **let's start with C:**
 when you are child how you learn to speak ?
  - You listen to your parents and people around you.
  - You try to speak and make mistakes.
  - You learn from your mistakes and improve over time.
  - You practice speaking every day.
  - You read books and listen to others to expand your vocabulary.
  - You keep learning new words and phrases.
  - You become fluent in speaking over time.
  - You continue to learn and improve your speaking skills throughout your life.
### so  Every Language to learn we need to these data or steps either it computer language or human language.
  - 1 Character(A-Z, a-z, 0-9, _ etc)
  - 2 Word (combination of characters)
  - 3 Sentence (combination of words) 
  - 4 Paragraph (combination of sentences)
  - 5 Chapter (combination of paragraphs)
  - 6 Book (combination of chapters)

### in programming language we say this as:
  - 1 Character (A-Z, a-z, 0-9, _ etc)
  - 2 Token (combination of characters)
  - 3 Statement (combination of tokens)
  - 4 Block (combination of statements)
  - 5 Program (combination of blocks)
  - 6 Project (combination of programs)
  - 7 Software (combination of projects)
  - 8 Application (combination of software)


# How program run in computer internally :
 by diagram
```mermaid
graph TD;
    A[Source Code] --> B[Compiler/Interpreter];
    B --> C[Machine Code];
    C --> D[Operating System];
    D --> E[Hardware];
    E --> F[Output];
```

# example of C program
```c
#include <stdio.h>
int main() {
    printf("Hello, World!\n");
    return 0;
}
```

# How to run C program in computer

1. **Write the Code**: Use a text editor to write your C program and save it with a `.c` extension (e.g., `hello.c`).
2. **Compile the Code**: Use a C compiler (like `gcc`) to compile your code into machine code. Open a terminal and run:
   ```bash
   gcc hello.c -o hello
   ```
   This command compiles `hello.c` and creates an executable file named `hello`.
3. **Run the Program**: Execute the compiled program by running:
   ```bash
    ./hello
    ```
4. **View Output**: The program will run, and you should see the output in the terminal:
    ```
    Hello, World!
    ```
--------------------------

# How to compile and run C program in internally in computer

```mermaid
graph TD
A[C Source Code] --> B(Preprocessing)
B --> C[Tokens + Expanded Code]
C --> D[Syntax Parsing AST]
D --> E[Semantic Check Logic]
E --> F[IR Generation]
F --> G[Optimization]
G --> H[Assembly Code]
H --> I[Machine Code/Object File]
I --> J[Linking]
J --> K[Executable ./app]
K --> L[Execution]
L --> M[Output]



